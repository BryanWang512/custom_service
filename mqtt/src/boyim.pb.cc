// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: boyim.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "boyim.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace boyim_proto {

namespace {

const ::google::protobuf::Descriptor* Header_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Header_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServiceReady_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServiceReady_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServiceReadyResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServiceReadyResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChatReadyRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatReadyRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChatReadyResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatReadyResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChatMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChatMessageAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatMessageAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* FunctionMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FunctionMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* FunctionMessageResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FunctionMessageResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogoutMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogoutMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServiceStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServiceStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShiftSession_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShiftSession_reflection_ = NULL;
const ::google::protobuf::Descriptor* EndSession_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EndSession_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_boyim_2eproto() {
  protobuf_AddDesc_boyim_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "boyim.proto");
  GOOGLE_CHECK(file != NULL);
  Header_descriptor_ = file->message_type(0);
  static const int Header_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, site_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, station_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, role_),
  };
  Header_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Header_descriptor_,
      Header::default_instance_,
      Header_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Header));
  LoginRequest_descriptor_ = file->message_type(1);
  static const int LoginRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, preferred_service_fid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, dest_service_fid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, from_service_fid_),
  };
  LoginRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginRequest_descriptor_,
      LoginRequest::default_instance_,
      LoginRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginRequest));
  LoginResponse_descriptor_ = file->message_type(2);
  static const int LoginResponse_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, role_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, return_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, service_gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, service_site_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, service_station_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, wait_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, serve_apps_),
  };
  LoginResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginResponse_descriptor_,
      LoginResponse::default_instance_,
      LoginResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginResponse));
  ServiceReady_descriptor_ = file->message_type(3);
  static const int ServiceReady_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceReady, header_),
  };
  ServiceReady_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServiceReady_descriptor_,
      ServiceReady::default_instance_,
      ServiceReady_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceReady, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceReady, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServiceReady));
  ServiceReadyResponse_descriptor_ = file->message_type(4);
  static const int ServiceReadyResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceReadyResponse, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceReadyResponse, client_fid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceReadyResponse, client_login_clock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceReadyResponse, wait_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceReadyResponse, client_entries_),
  };
  ServiceReadyResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServiceReadyResponse_descriptor_,
      ServiceReadyResponse::default_instance_,
      ServiceReadyResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceReadyResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceReadyResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServiceReadyResponse));
  ClientEntry_descriptor_ = file->message_type(5);
  static const int ClientEntry_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientEntry, client_fid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientEntry, start_clock_),
  };
  ClientEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientEntry_descriptor_,
      ClientEntry::default_instance_,
      ClientEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientEntry));
  ChatReadyRequest_descriptor_ = file->message_type(6);
  static const int ChatReadyRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatReadyRequest, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatReadyRequest, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatReadyRequest, client_info_),
  };
  ChatReadyRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChatReadyRequest_descriptor_,
      ChatReadyRequest::default_instance_,
      ChatReadyRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatReadyRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatReadyRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChatReadyRequest));
  ChatReadyResponse_descriptor_ = file->message_type(7);
  static const int ChatReadyResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatReadyResponse, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatReadyResponse, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatReadyResponse, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatReadyResponse, service_info_),
  };
  ChatReadyResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChatReadyResponse_descriptor_,
      ChatReadyResponse::default_instance_,
      ChatReadyResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatReadyResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatReadyResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChatReadyResponse));
  ChatMessage_descriptor_ = file->message_type(8);
  static const int ChatMessage_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage, seq_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage, msg_),
  };
  ChatMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChatMessage_descriptor_,
      ChatMessage::default_instance_,
      ChatMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChatMessage));
  ChatMessageAck_descriptor_ = file->message_type(9);
  static const int ChatMessageAck_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessageAck, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessageAck, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessageAck, seq_ids_),
  };
  ChatMessageAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChatMessageAck_descriptor_,
      ChatMessageAck::default_instance_,
      ChatMessageAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessageAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessageAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChatMessageAck));
  FunctionMessage_descriptor_ = file->message_type(10);
  static const int FunctionMessage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionMessage, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionMessage, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionMessage, seq_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionMessage, function_),
  };
  FunctionMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FunctionMessage_descriptor_,
      FunctionMessage::default_instance_,
      FunctionMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FunctionMessage));
  FunctionMessageResponse_descriptor_ = file->message_type(11);
  static const int FunctionMessageResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionMessageResponse, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionMessageResponse, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionMessageResponse, seq_id_),
  };
  FunctionMessageResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FunctionMessageResponse_descriptor_,
      FunctionMessageResponse::default_instance_,
      FunctionMessageResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionMessageResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionMessageResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FunctionMessageResponse));
  LogoutMessage_descriptor_ = file->message_type(12);
  static const int LogoutMessage_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutMessage, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutMessage, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutMessage, clock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutMessage, service_gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutMessage, service_site_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutMessage, service_station_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutMessage, end_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutMessage, extra_),
  };
  LogoutMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogoutMessage_descriptor_,
      LogoutMessage::default_instance_,
      LogoutMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogoutMessage));
  ServiceStatus_descriptor_ = file->message_type(13);
  static const int ServiceStatus_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceStatus, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceStatus, status_),
  };
  ServiceStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServiceStatus_descriptor_,
      ServiceStatus::default_instance_,
      ServiceStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServiceStatus));
  ShiftSession_descriptor_ = file->message_type(14);
  static const int ShiftSession_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShiftSession, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShiftSession, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShiftSession, shift_to_fid_),
  };
  ShiftSession_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShiftSession_descriptor_,
      ShiftSession::default_instance_,
      ShiftSession_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShiftSession, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShiftSession, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShiftSession));
  EndSession_descriptor_ = file->message_type(15);
  static const int EndSession_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndSession, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndSession, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndSession, client_gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndSession, client_site_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndSession, client_station_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndSession, archive_class_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndSession, archive_category_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndSession, session_upgraded_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndSession, session_invalid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndSession, end_type_),
  };
  EndSession_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EndSession_descriptor_,
      EndSession::default_instance_,
      EndSession_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndSession, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndSession, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EndSession));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_boyim_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Header_descriptor_, &Header::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginRequest_descriptor_, &LoginRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginResponse_descriptor_, &LoginResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServiceReady_descriptor_, &ServiceReady::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServiceReadyResponse_descriptor_, &ServiceReadyResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientEntry_descriptor_, &ClientEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChatReadyRequest_descriptor_, &ChatReadyRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChatReadyResponse_descriptor_, &ChatReadyResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChatMessage_descriptor_, &ChatMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChatMessageAck_descriptor_, &ChatMessageAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FunctionMessage_descriptor_, &FunctionMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FunctionMessageResponse_descriptor_, &FunctionMessageResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogoutMessage_descriptor_, &LogoutMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServiceStatus_descriptor_, &ServiceStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShiftSession_descriptor_, &ShiftSession::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EndSession_descriptor_, &EndSession::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_boyim_2eproto() {
  delete Header::default_instance_;
  delete Header_reflection_;
  delete LoginRequest::default_instance_;
  delete LoginRequest_reflection_;
  delete LoginResponse::default_instance_;
  delete LoginResponse_reflection_;
  delete ServiceReady::default_instance_;
  delete ServiceReady_reflection_;
  delete ServiceReadyResponse::default_instance_;
  delete ServiceReadyResponse_reflection_;
  delete ClientEntry::default_instance_;
  delete ClientEntry_reflection_;
  delete ChatReadyRequest::default_instance_;
  delete ChatReadyRequest_reflection_;
  delete ChatReadyResponse::default_instance_;
  delete ChatReadyResponse_reflection_;
  delete ChatMessage::default_instance_;
  delete ChatMessage_reflection_;
  delete ChatMessageAck::default_instance_;
  delete ChatMessageAck_reflection_;
  delete FunctionMessage::default_instance_;
  delete FunctionMessage_reflection_;
  delete FunctionMessageResponse::default_instance_;
  delete FunctionMessageResponse_reflection_;
  delete LogoutMessage::default_instance_;
  delete LogoutMessage_reflection_;
  delete ServiceStatus::default_instance_;
  delete ServiceStatus_reflection_;
  delete ShiftSession::default_instance_;
  delete ShiftSession_reflection_;
  delete EndSession::default_instance_;
  delete EndSession_reflection_;
}

void protobuf_AddDesc_boyim_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013boyim.proto\022\013boyim_proto\"H\n\006Header\022\013\n\003"
    "gid\030\001 \002(\t\022\017\n\007site_id\030\002 \002(\t\022\022\n\nstation_id"
    "\030\003 \002(\t\022\014\n\004role\030\004 \002(\t\"\206\001\n\014LoginRequest\022#\n"
    "\006header\030\001 \002(\0132\023.boyim_proto.Header\022\035\n\025pr"
    "eferred_service_fid\030\002 \001(\t\022\030\n\020dest_servic"
    "e_fid\030\003 \001(\t\022\030\n\020from_service_fid\030\004 \001(\t\"\305\001"
    "\n\rLoginResponse\022\014\n\004code\030\001 \002(\005\022\022\n\nsession"
    "_id\030\002 \001(\t\022\014\n\004role\030\003 \001(\t\022\022\n\nreturn_msg\030\004 "
    "\001(\t\022\023\n\013service_gid\030\013 \001(\t\022\027\n\017service_site"
    "_id\030\014 \001(\t\022\032\n\022service_station_id\030\r \001(\t\022\022\n"
    "\nwait_count\030\016 \001(\005\022\022\n\nserve_apps\030\025 \003(\t\"3\n"
    "\014ServiceReady\022#\n\006header\030\001 \002(\0132\023.boyim_pr"
    "oto.Header\"\232\001\n\024ServiceReadyResponse\022\014\n\004c"
    "ode\030\001 \002(\005\022\022\n\nclient_fid\030\002 \001(\t\022\032\n\022client_"
    "login_clock\030\003 \001(\003\022\022\n\nwait_count\030\004 \001(\005\0220\n"
    "\016client_entries\030\005 \003(\0132\030.boyim_proto.Clie"
    "ntEntry\"6\n\013ClientEntry\022\022\n\nclient_fid\030\001 \002"
    "(\t\022\023\n\013start_clock\030\002 \002(\003\"`\n\020ChatReadyRequ"
    "est\022#\n\006header\030\001 \002(\0132\023.boyim_proto.Header"
    "\022\022\n\nsession_id\030\002 \002(\t\022\023\n\013client_info\030\003 \002("
    "\t\"p\n\021ChatReadyResponse\022#\n\006header\030\001 \002(\0132\023"
    ".boyim_proto.Header\022\022\n\nsession_id\030\002 \002(\t\022"
    "\014\n\004code\030\003 \002(\005\022\024\n\014service_info\030\004 \001(\t\"q\n\013C"
    "hatMessage\022#\n\006header\030\001 \002(\0132\023.boyim_proto"
    ".Header\022\022\n\nsession_id\030\002 \002(\t\022\016\n\006seq_id\030\003 "
    "\002(\003\022\014\n\004type\030\004 \002(\t\022\013\n\003msg\030\005 \002(\t\"Z\n\016ChatMe"
    "ssageAck\022#\n\006header\030\001 \002(\0132\023.boyim_proto.H"
    "eader\022\022\n\nsession_id\030\002 \002(\t\022\017\n\007seq_ids\030\003 \003"
    "(\003\"l\n\017FunctionMessage\022#\n\006header\030\001 \002(\0132\023."
    "boyim_proto.Header\022\022\n\nsession_id\030\002 \002(\t\022\016"
    "\n\006seq_id\030\003 \002(\003\022\020\n\010function\030\004 \002(\t\"K\n\027Func"
    "tionMessageResponse\022\014\n\004code\030\001 \002(\005\022\022\n\nses"
    "sion_id\030\002 \002(\t\022\016\n\006seq_id\030\003 \002(\003\"\302\001\n\rLogout"
    "Message\022#\n\006header\030\001 \002(\0132\023.boyim_proto.He"
    "ader\022\022\n\nsession_id\030\002 \001(\t\022\r\n\005clock\030\003 \001(\003\022"
    "\023\n\013service_gid\030\004 \001(\t\022\027\n\017service_site_id\030"
    "\005 \001(\t\022\032\n\022service_station_id\030\006 \001(\t\022\020\n\010end"
    "_type\030\007 \001(\005\022\r\n\005extra\030\013 \001(\t\"D\n\rServiceSta"
    "tus\022#\n\006header\030\001 \002(\0132\023.boyim_proto.Header"
    "\022\016\n\006status\030\002 \002(\005\"]\n\014ShiftSession\022#\n\006head"
    "er\030\001 \002(\0132\023.boyim_proto.Header\022\022\n\nsession"
    "_id\030\002 \002(\t\022\024\n\014shift_to_fid\030\003 \002(\t\"\202\002\n\nEndS"
    "ession\022#\n\006header\030\001 \002(\0132\023.boyim_proto.Hea"
    "der\022\022\n\nsession_id\030\002 \002(\t\022\022\n\nclient_gid\030\003 "
    "\002(\t\022\026\n\016client_site_id\030\004 \002(\t\022\031\n\021client_st"
    "ation_id\030\005 \002(\t\022\025\n\rarchive_class\030\006 \001(\005\022\030\n"
    "\020archive_category\030\007 \001(\005\022\030\n\020session_upgra"
    "ded\030\010 \001(\005\022\027\n\017session_invalid\030\t \001(\005\022\020\n\010en"
    "d_type\030\n \001(\005", 1932);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "boyim.proto", &protobuf_RegisterTypes);
  Header::default_instance_ = new Header();
  LoginRequest::default_instance_ = new LoginRequest();
  LoginResponse::default_instance_ = new LoginResponse();
  ServiceReady::default_instance_ = new ServiceReady();
  ServiceReadyResponse::default_instance_ = new ServiceReadyResponse();
  ClientEntry::default_instance_ = new ClientEntry();
  ChatReadyRequest::default_instance_ = new ChatReadyRequest();
  ChatReadyResponse::default_instance_ = new ChatReadyResponse();
  ChatMessage::default_instance_ = new ChatMessage();
  ChatMessageAck::default_instance_ = new ChatMessageAck();
  FunctionMessage::default_instance_ = new FunctionMessage();
  FunctionMessageResponse::default_instance_ = new FunctionMessageResponse();
  LogoutMessage::default_instance_ = new LogoutMessage();
  ServiceStatus::default_instance_ = new ServiceStatus();
  ShiftSession::default_instance_ = new ShiftSession();
  EndSession::default_instance_ = new EndSession();
  Header::default_instance_->InitAsDefaultInstance();
  LoginRequest::default_instance_->InitAsDefaultInstance();
  LoginResponse::default_instance_->InitAsDefaultInstance();
  ServiceReady::default_instance_->InitAsDefaultInstance();
  ServiceReadyResponse::default_instance_->InitAsDefaultInstance();
  ClientEntry::default_instance_->InitAsDefaultInstance();
  ChatReadyRequest::default_instance_->InitAsDefaultInstance();
  ChatReadyResponse::default_instance_->InitAsDefaultInstance();
  ChatMessage::default_instance_->InitAsDefaultInstance();
  ChatMessageAck::default_instance_->InitAsDefaultInstance();
  FunctionMessage::default_instance_->InitAsDefaultInstance();
  FunctionMessageResponse::default_instance_->InitAsDefaultInstance();
  LogoutMessage::default_instance_->InitAsDefaultInstance();
  ServiceStatus::default_instance_->InitAsDefaultInstance();
  ShiftSession::default_instance_->InitAsDefaultInstance();
  EndSession::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_boyim_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_boyim_2eproto {
  StaticDescriptorInitializer_boyim_2eproto() {
    protobuf_AddDesc_boyim_2eproto();
  }
} static_descriptor_initializer_boyim_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Header::kGidFieldNumber;
const int Header::kSiteIdFieldNumber;
const int Header::kStationIdFieldNumber;
const int Header::kRoleFieldNumber;
#endif  // !_MSC_VER

Header::Header()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:boyim_proto.Header)
}

void Header::InitAsDefaultInstance() {
}

Header::Header(const Header& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:boyim_proto.Header)
}

void Header::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  gid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  site_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  station_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  role_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Header::~Header() {
  // @@protoc_insertion_point(destructor:boyim_proto.Header)
  SharedDtor();
}

void Header::SharedDtor() {
  if (gid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gid_;
  }
  if (site_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete site_id_;
  }
  if (station_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete station_id_;
  }
  if (role_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete role_;
  }
  if (this != default_instance_) {
  }
}

void Header::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Header::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Header_descriptor_;
}

const Header& Header::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_boyim_2eproto();
  return *default_instance_;
}

Header* Header::default_instance_ = NULL;

Header* Header::New() const {
  return new Header;
}

void Header::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_gid()) {
      if (gid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        gid_->clear();
      }
    }
    if (has_site_id()) {
      if (site_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        site_id_->clear();
      }
    }
    if (has_station_id()) {
      if (station_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        station_id_->clear();
      }
    }
    if (has_role()) {
      if (role_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        role_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Header::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:boyim_proto.Header)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string gid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gid().data(), this->gid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_site_id;
        break;
      }

      // required string site_id = 2;
      case 2: {
        if (tag == 18) {
         parse_site_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_site_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->site_id().data(), this->site_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "site_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_station_id;
        break;
      }

      // required string station_id = 3;
      case 3: {
        if (tag == 26) {
         parse_station_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_station_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->station_id().data(), this->station_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "station_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_role;
        break;
      }

      // required string role = 4;
      case 4: {
        if (tag == 34) {
         parse_role:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->role().data(), this->role().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "role");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:boyim_proto.Header)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:boyim_proto.Header)
  return false;
#undef DO_
}

void Header::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:boyim_proto.Header)
  // required string gid = 1;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gid().data(), this->gid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->gid(), output);
  }

  // required string site_id = 2;
  if (has_site_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->site_id().data(), this->site_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "site_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->site_id(), output);
  }

  // required string station_id = 3;
  if (has_station_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->station_id().data(), this->station_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "station_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->station_id(), output);
  }

  // required string role = 4;
  if (has_role()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->role().data(), this->role().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "role");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->role(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:boyim_proto.Header)
}

::google::protobuf::uint8* Header::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:boyim_proto.Header)
  // required string gid = 1;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gid().data(), this->gid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gid(), target);
  }

  // required string site_id = 2;
  if (has_site_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->site_id().data(), this->site_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "site_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->site_id(), target);
  }

  // required string station_id = 3;
  if (has_station_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->station_id().data(), this->station_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "station_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->station_id(), target);
  }

  // required string role = 4;
  if (has_role()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->role().data(), this->role().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "role");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->role(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:boyim_proto.Header)
  return target;
}

int Header::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string gid = 1;
    if (has_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gid());
    }

    // required string site_id = 2;
    if (has_site_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->site_id());
    }

    // required string station_id = 3;
    if (has_station_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->station_id());
    }

    // required string role = 4;
    if (has_role()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Header::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Header* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Header*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Header::MergeFrom(const Header& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gid()) {
      set_gid(from.gid());
    }
    if (from.has_site_id()) {
      set_site_id(from.site_id());
    }
    if (from.has_station_id()) {
      set_station_id(from.station_id());
    }
    if (from.has_role()) {
      set_role(from.role());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Header::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Header::CopyFrom(const Header& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Header::Swap(Header* other) {
  if (other != this) {
    std::swap(gid_, other->gid_);
    std::swap(site_id_, other->site_id_);
    std::swap(station_id_, other->station_id_);
    std::swap(role_, other->role_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Header::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Header_descriptor_;
  metadata.reflection = Header_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginRequest::kHeaderFieldNumber;
const int LoginRequest::kPreferredServiceFidFieldNumber;
const int LoginRequest::kDestServiceFidFieldNumber;
const int LoginRequest::kFromServiceFidFieldNumber;
#endif  // !_MSC_VER

LoginRequest::LoginRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:boyim_proto.LoginRequest)
}

void LoginRequest::InitAsDefaultInstance() {
  header_ = const_cast< ::boyim_proto::Header*>(&::boyim_proto::Header::default_instance());
}

LoginRequest::LoginRequest(const LoginRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:boyim_proto.LoginRequest)
}

void LoginRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  header_ = NULL;
  preferred_service_fid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dest_service_fid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_service_fid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginRequest::~LoginRequest() {
  // @@protoc_insertion_point(destructor:boyim_proto.LoginRequest)
  SharedDtor();
}

void LoginRequest::SharedDtor() {
  if (preferred_service_fid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete preferred_service_fid_;
  }
  if (dest_service_fid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dest_service_fid_;
  }
  if (from_service_fid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete from_service_fid_;
  }
  if (this != default_instance_) {
    delete header_;
  }
}

void LoginRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginRequest_descriptor_;
}

const LoginRequest& LoginRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_boyim_2eproto();
  return *default_instance_;
}

LoginRequest* LoginRequest::default_instance_ = NULL;

LoginRequest* LoginRequest::New() const {
  return new LoginRequest;
}

void LoginRequest::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_header()) {
      if (header_ != NULL) header_->::boyim_proto::Header::Clear();
    }
    if (has_preferred_service_fid()) {
      if (preferred_service_fid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        preferred_service_fid_->clear();
      }
    }
    if (has_dest_service_fid()) {
      if (dest_service_fid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        dest_service_fid_->clear();
      }
    }
    if (has_from_service_fid()) {
      if (from_service_fid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        from_service_fid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:boyim_proto.LoginRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .boyim_proto.Header header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_preferred_service_fid;
        break;
      }

      // optional string preferred_service_fid = 2;
      case 2: {
        if (tag == 18) {
         parse_preferred_service_fid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_preferred_service_fid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->preferred_service_fid().data(), this->preferred_service_fid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "preferred_service_fid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_dest_service_fid;
        break;
      }

      // optional string dest_service_fid = 3;
      case 3: {
        if (tag == 26) {
         parse_dest_service_fid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dest_service_fid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dest_service_fid().data(), this->dest_service_fid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dest_service_fid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_from_service_fid;
        break;
      }

      // optional string from_service_fid = 4;
      case 4: {
        if (tag == 34) {
         parse_from_service_fid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_service_fid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->from_service_fid().data(), this->from_service_fid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "from_service_fid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:boyim_proto.LoginRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:boyim_proto.LoginRequest)
  return false;
#undef DO_
}

void LoginRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:boyim_proto.LoginRequest)
  // required .boyim_proto.Header header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // optional string preferred_service_fid = 2;
  if (has_preferred_service_fid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->preferred_service_fid().data(), this->preferred_service_fid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "preferred_service_fid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->preferred_service_fid(), output);
  }

  // optional string dest_service_fid = 3;
  if (has_dest_service_fid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dest_service_fid().data(), this->dest_service_fid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dest_service_fid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->dest_service_fid(), output);
  }

  // optional string from_service_fid = 4;
  if (has_from_service_fid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->from_service_fid().data(), this->from_service_fid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "from_service_fid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->from_service_fid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:boyim_proto.LoginRequest)
}

::google::protobuf::uint8* LoginRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:boyim_proto.LoginRequest)
  // required .boyim_proto.Header header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // optional string preferred_service_fid = 2;
  if (has_preferred_service_fid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->preferred_service_fid().data(), this->preferred_service_fid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "preferred_service_fid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->preferred_service_fid(), target);
  }

  // optional string dest_service_fid = 3;
  if (has_dest_service_fid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dest_service_fid().data(), this->dest_service_fid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dest_service_fid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->dest_service_fid(), target);
  }

  // optional string from_service_fid = 4;
  if (has_from_service_fid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->from_service_fid().data(), this->from_service_fid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "from_service_fid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->from_service_fid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:boyim_proto.LoginRequest)
  return target;
}

int LoginRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .boyim_proto.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // optional string preferred_service_fid = 2;
    if (has_preferred_service_fid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->preferred_service_fid());
    }

    // optional string dest_service_fid = 3;
    if (has_dest_service_fid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dest_service_fid());
    }

    // optional string from_service_fid = 4;
    if (has_from_service_fid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->from_service_fid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginRequest::MergeFrom(const LoginRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::boyim_proto::Header::MergeFrom(from.header());
    }
    if (from.has_preferred_service_fid()) {
      set_preferred_service_fid(from.preferred_service_fid());
    }
    if (from.has_dest_service_fid()) {
      set_dest_service_fid(from.dest_service_fid());
    }
    if (from.has_from_service_fid()) {
      set_from_service_fid(from.from_service_fid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRequest::CopyFrom(const LoginRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_header()) {
    if (!this->header().IsInitialized()) return false;
  }
  return true;
}

void LoginRequest::Swap(LoginRequest* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(preferred_service_fid_, other->preferred_service_fid_);
    std::swap(dest_service_fid_, other->dest_service_fid_);
    std::swap(from_service_fid_, other->from_service_fid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginRequest_descriptor_;
  metadata.reflection = LoginRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginResponse::kCodeFieldNumber;
const int LoginResponse::kSessionIdFieldNumber;
const int LoginResponse::kRoleFieldNumber;
const int LoginResponse::kReturnMsgFieldNumber;
const int LoginResponse::kServiceGidFieldNumber;
const int LoginResponse::kServiceSiteIdFieldNumber;
const int LoginResponse::kServiceStationIdFieldNumber;
const int LoginResponse::kWaitCountFieldNumber;
const int LoginResponse::kServeAppsFieldNumber;
#endif  // !_MSC_VER

LoginResponse::LoginResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:boyim_proto.LoginResponse)
}

void LoginResponse::InitAsDefaultInstance() {
}

LoginResponse::LoginResponse(const LoginResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:boyim_proto.LoginResponse)
}

void LoginResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  code_ = 0;
  session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  role_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  return_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  service_gid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  service_site_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  service_station_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  wait_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginResponse::~LoginResponse() {
  // @@protoc_insertion_point(destructor:boyim_proto.LoginResponse)
  SharedDtor();
}

void LoginResponse::SharedDtor() {
  if (session_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete session_id_;
  }
  if (role_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete role_;
  }
  if (return_msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete return_msg_;
  }
  if (service_gid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete service_gid_;
  }
  if (service_site_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete service_site_id_;
  }
  if (service_station_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete service_station_id_;
  }
  if (this != default_instance_) {
  }
}

void LoginResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginResponse_descriptor_;
}

const LoginResponse& LoginResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_boyim_2eproto();
  return *default_instance_;
}

LoginResponse* LoginResponse::default_instance_ = NULL;

LoginResponse* LoginResponse::New() const {
  return new LoginResponse;
}

void LoginResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LoginResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(code_, wait_count_);
    if (has_session_id()) {
      if (session_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        session_id_->clear();
      }
    }
    if (has_role()) {
      if (role_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        role_->clear();
      }
    }
    if (has_return_msg()) {
      if (return_msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        return_msg_->clear();
      }
    }
    if (has_service_gid()) {
      if (service_gid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        service_gid_->clear();
      }
    }
    if (has_service_site_id()) {
      if (service_site_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        service_site_id_->clear();
      }
    }
    if (has_service_station_id()) {
      if (service_station_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        service_station_id_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  serve_apps_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:boyim_proto.LoginResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_session_id;
        break;
      }

      // optional string session_id = 2;
      case 2: {
        if (tag == 18) {
         parse_session_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->session_id().data(), this->session_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "session_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_role;
        break;
      }

      // optional string role = 3;
      case 3: {
        if (tag == 26) {
         parse_role:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->role().data(), this->role().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "role");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_return_msg;
        break;
      }

      // optional string return_msg = 4;
      case 4: {
        if (tag == 34) {
         parse_return_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_return_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->return_msg().data(), this->return_msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "return_msg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_service_gid;
        break;
      }

      // optional string service_gid = 11;
      case 11: {
        if (tag == 90) {
         parse_service_gid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_gid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->service_gid().data(), this->service_gid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "service_gid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_service_site_id;
        break;
      }

      // optional string service_site_id = 12;
      case 12: {
        if (tag == 98) {
         parse_service_site_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_site_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->service_site_id().data(), this->service_site_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "service_site_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_service_station_id;
        break;
      }

      // optional string service_station_id = 13;
      case 13: {
        if (tag == 106) {
         parse_service_station_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_station_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->service_station_id().data(), this->service_station_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "service_station_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_wait_count;
        break;
      }

      // optional int32 wait_count = 14;
      case 14: {
        if (tag == 112) {
         parse_wait_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wait_count_)));
          set_has_wait_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_serve_apps;
        break;
      }

      // repeated string serve_apps = 21;
      case 21: {
        if (tag == 170) {
         parse_serve_apps:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_serve_apps()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serve_apps(this->serve_apps_size() - 1).data(),
            this->serve_apps(this->serve_apps_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "serve_apps");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_serve_apps;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:boyim_proto.LoginResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:boyim_proto.LoginResponse)
  return false;
#undef DO_
}

void LoginResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:boyim_proto.LoginResponse)
  // required int32 code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // optional string session_id = 2;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "session_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->session_id(), output);
  }

  // optional string role = 3;
  if (has_role()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->role().data(), this->role().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "role");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->role(), output);
  }

  // optional string return_msg = 4;
  if (has_return_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->return_msg().data(), this->return_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "return_msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->return_msg(), output);
  }

  // optional string service_gid = 11;
  if (has_service_gid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->service_gid().data(), this->service_gid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "service_gid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->service_gid(), output);
  }

  // optional string service_site_id = 12;
  if (has_service_site_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->service_site_id().data(), this->service_site_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "service_site_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->service_site_id(), output);
  }

  // optional string service_station_id = 13;
  if (has_service_station_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->service_station_id().data(), this->service_station_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "service_station_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->service_station_id(), output);
  }

  // optional int32 wait_count = 14;
  if (has_wait_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->wait_count(), output);
  }

  // repeated string serve_apps = 21;
  for (int i = 0; i < this->serve_apps_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->serve_apps(i).data(), this->serve_apps(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "serve_apps");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      21, this->serve_apps(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:boyim_proto.LoginResponse)
}

::google::protobuf::uint8* LoginResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:boyim_proto.LoginResponse)
  // required int32 code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // optional string session_id = 2;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "session_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->session_id(), target);
  }

  // optional string role = 3;
  if (has_role()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->role().data(), this->role().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "role");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->role(), target);
  }

  // optional string return_msg = 4;
  if (has_return_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->return_msg().data(), this->return_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "return_msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->return_msg(), target);
  }

  // optional string service_gid = 11;
  if (has_service_gid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->service_gid().data(), this->service_gid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "service_gid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->service_gid(), target);
  }

  // optional string service_site_id = 12;
  if (has_service_site_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->service_site_id().data(), this->service_site_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "service_site_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->service_site_id(), target);
  }

  // optional string service_station_id = 13;
  if (has_service_station_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->service_station_id().data(), this->service_station_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "service_station_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->service_station_id(), target);
  }

  // optional int32 wait_count = 14;
  if (has_wait_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->wait_count(), target);
  }

  // repeated string serve_apps = 21;
  for (int i = 0; i < this->serve_apps_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serve_apps(i).data(), this->serve_apps(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serve_apps");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(21, this->serve_apps(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:boyim_proto.LoginResponse)
  return target;
}

int LoginResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

    // optional string session_id = 2;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->session_id());
    }

    // optional string role = 3;
    if (has_role()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role());
    }

    // optional string return_msg = 4;
    if (has_return_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->return_msg());
    }

    // optional string service_gid = 11;
    if (has_service_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->service_gid());
    }

    // optional string service_site_id = 12;
    if (has_service_site_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->service_site_id());
    }

    // optional string service_station_id = 13;
    if (has_service_station_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->service_station_id());
    }

    // optional int32 wait_count = 14;
    if (has_wait_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wait_count());
    }

  }
  // repeated string serve_apps = 21;
  total_size += 2 * this->serve_apps_size();
  for (int i = 0; i < this->serve_apps_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->serve_apps(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginResponse::MergeFrom(const LoginResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  serve_apps_.MergeFrom(from.serve_apps_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_role()) {
      set_role(from.role());
    }
    if (from.has_return_msg()) {
      set_return_msg(from.return_msg());
    }
    if (from.has_service_gid()) {
      set_service_gid(from.service_gid());
    }
    if (from.has_service_site_id()) {
      set_service_site_id(from.service_site_id());
    }
    if (from.has_service_station_id()) {
      set_service_station_id(from.service_station_id());
    }
    if (from.has_wait_count()) {
      set_wait_count(from.wait_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginResponse::CopyFrom(const LoginResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void LoginResponse::Swap(LoginResponse* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(session_id_, other->session_id_);
    std::swap(role_, other->role_);
    std::swap(return_msg_, other->return_msg_);
    std::swap(service_gid_, other->service_gid_);
    std::swap(service_site_id_, other->service_site_id_);
    std::swap(service_station_id_, other->service_station_id_);
    std::swap(wait_count_, other->wait_count_);
    serve_apps_.Swap(&other->serve_apps_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginResponse_descriptor_;
  metadata.reflection = LoginResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServiceReady::kHeaderFieldNumber;
#endif  // !_MSC_VER

ServiceReady::ServiceReady()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:boyim_proto.ServiceReady)
}

void ServiceReady::InitAsDefaultInstance() {
  header_ = const_cast< ::boyim_proto::Header*>(&::boyim_proto::Header::default_instance());
}

ServiceReady::ServiceReady(const ServiceReady& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:boyim_proto.ServiceReady)
}

void ServiceReady::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServiceReady::~ServiceReady() {
  // @@protoc_insertion_point(destructor:boyim_proto.ServiceReady)
  SharedDtor();
}

void ServiceReady::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
  }
}

void ServiceReady::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServiceReady::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServiceReady_descriptor_;
}

const ServiceReady& ServiceReady::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_boyim_2eproto();
  return *default_instance_;
}

ServiceReady* ServiceReady::default_instance_ = NULL;

ServiceReady* ServiceReady::New() const {
  return new ServiceReady;
}

void ServiceReady::Clear() {
  if (has_header()) {
    if (header_ != NULL) header_->::boyim_proto::Header::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServiceReady::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:boyim_proto.ServiceReady)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .boyim_proto.Header header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:boyim_proto.ServiceReady)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:boyim_proto.ServiceReady)
  return false;
#undef DO_
}

void ServiceReady::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:boyim_proto.ServiceReady)
  // required .boyim_proto.Header header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:boyim_proto.ServiceReady)
}

::google::protobuf::uint8* ServiceReady::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:boyim_proto.ServiceReady)
  // required .boyim_proto.Header header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:boyim_proto.ServiceReady)
  return target;
}

int ServiceReady::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .boyim_proto.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServiceReady::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServiceReady* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServiceReady*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServiceReady::MergeFrom(const ServiceReady& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::boyim_proto::Header::MergeFrom(from.header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServiceReady::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceReady::CopyFrom(const ServiceReady& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceReady::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_header()) {
    if (!this->header().IsInitialized()) return false;
  }
  return true;
}

void ServiceReady::Swap(ServiceReady* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServiceReady::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServiceReady_descriptor_;
  metadata.reflection = ServiceReady_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServiceReadyResponse::kCodeFieldNumber;
const int ServiceReadyResponse::kClientFidFieldNumber;
const int ServiceReadyResponse::kClientLoginClockFieldNumber;
const int ServiceReadyResponse::kWaitCountFieldNumber;
const int ServiceReadyResponse::kClientEntriesFieldNumber;
#endif  // !_MSC_VER

ServiceReadyResponse::ServiceReadyResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:boyim_proto.ServiceReadyResponse)
}

void ServiceReadyResponse::InitAsDefaultInstance() {
}

ServiceReadyResponse::ServiceReadyResponse(const ServiceReadyResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:boyim_proto.ServiceReadyResponse)
}

void ServiceReadyResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  code_ = 0;
  client_fid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_login_clock_ = GOOGLE_LONGLONG(0);
  wait_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServiceReadyResponse::~ServiceReadyResponse() {
  // @@protoc_insertion_point(destructor:boyim_proto.ServiceReadyResponse)
  SharedDtor();
}

void ServiceReadyResponse::SharedDtor() {
  if (client_fid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete client_fid_;
  }
  if (this != default_instance_) {
  }
}

void ServiceReadyResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServiceReadyResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServiceReadyResponse_descriptor_;
}

const ServiceReadyResponse& ServiceReadyResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_boyim_2eproto();
  return *default_instance_;
}

ServiceReadyResponse* ServiceReadyResponse::default_instance_ = NULL;

ServiceReadyResponse* ServiceReadyResponse::New() const {
  return new ServiceReadyResponse;
}

void ServiceReadyResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ServiceReadyResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(code_, client_login_clock_);
    if (has_client_fid()) {
      if (client_fid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        client_fid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  client_entries_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServiceReadyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:boyim_proto.ServiceReadyResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_client_fid;
        break;
      }

      // optional string client_fid = 2;
      case 2: {
        if (tag == 18) {
         parse_client_fid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_fid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->client_fid().data(), this->client_fid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "client_fid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_client_login_clock;
        break;
      }

      // optional int64 client_login_clock = 3;
      case 3: {
        if (tag == 24) {
         parse_client_login_clock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &client_login_clock_)));
          set_has_client_login_clock();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_wait_count;
        break;
      }

      // optional int32 wait_count = 4;
      case 4: {
        if (tag == 32) {
         parse_wait_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wait_count_)));
          set_has_wait_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_client_entries;
        break;
      }

      // repeated .boyim_proto.ClientEntry client_entries = 5;
      case 5: {
        if (tag == 42) {
         parse_client_entries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_client_entries()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_client_entries;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:boyim_proto.ServiceReadyResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:boyim_proto.ServiceReadyResponse)
  return false;
#undef DO_
}

void ServiceReadyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:boyim_proto.ServiceReadyResponse)
  // required int32 code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // optional string client_fid = 2;
  if (has_client_fid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_fid().data(), this->client_fid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "client_fid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->client_fid(), output);
  }

  // optional int64 client_login_clock = 3;
  if (has_client_login_clock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->client_login_clock(), output);
  }

  // optional int32 wait_count = 4;
  if (has_wait_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->wait_count(), output);
  }

  // repeated .boyim_proto.ClientEntry client_entries = 5;
  for (int i = 0; i < this->client_entries_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->client_entries(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:boyim_proto.ServiceReadyResponse)
}

::google::protobuf::uint8* ServiceReadyResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:boyim_proto.ServiceReadyResponse)
  // required int32 code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // optional string client_fid = 2;
  if (has_client_fid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_fid().data(), this->client_fid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "client_fid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->client_fid(), target);
  }

  // optional int64 client_login_clock = 3;
  if (has_client_login_clock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->client_login_clock(), target);
  }

  // optional int32 wait_count = 4;
  if (has_wait_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->wait_count(), target);
  }

  // repeated .boyim_proto.ClientEntry client_entries = 5;
  for (int i = 0; i < this->client_entries_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->client_entries(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:boyim_proto.ServiceReadyResponse)
  return target;
}

int ServiceReadyResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

    // optional string client_fid = 2;
    if (has_client_fid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->client_fid());
    }

    // optional int64 client_login_clock = 3;
    if (has_client_login_clock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->client_login_clock());
    }

    // optional int32 wait_count = 4;
    if (has_wait_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wait_count());
    }

  }
  // repeated .boyim_proto.ClientEntry client_entries = 5;
  total_size += 1 * this->client_entries_size();
  for (int i = 0; i < this->client_entries_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->client_entries(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServiceReadyResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServiceReadyResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServiceReadyResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServiceReadyResponse::MergeFrom(const ServiceReadyResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  client_entries_.MergeFrom(from.client_entries_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_client_fid()) {
      set_client_fid(from.client_fid());
    }
    if (from.has_client_login_clock()) {
      set_client_login_clock(from.client_login_clock());
    }
    if (from.has_wait_count()) {
      set_wait_count(from.wait_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServiceReadyResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceReadyResponse::CopyFrom(const ServiceReadyResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceReadyResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->client_entries())) return false;
  return true;
}

void ServiceReadyResponse::Swap(ServiceReadyResponse* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(client_fid_, other->client_fid_);
    std::swap(client_login_clock_, other->client_login_clock_);
    std::swap(wait_count_, other->wait_count_);
    client_entries_.Swap(&other->client_entries_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServiceReadyResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServiceReadyResponse_descriptor_;
  metadata.reflection = ServiceReadyResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientEntry::kClientFidFieldNumber;
const int ClientEntry::kStartClockFieldNumber;
#endif  // !_MSC_VER

ClientEntry::ClientEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:boyim_proto.ClientEntry)
}

void ClientEntry::InitAsDefaultInstance() {
}

ClientEntry::ClientEntry(const ClientEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:boyim_proto.ClientEntry)
}

void ClientEntry::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  client_fid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_clock_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientEntry::~ClientEntry() {
  // @@protoc_insertion_point(destructor:boyim_proto.ClientEntry)
  SharedDtor();
}

void ClientEntry::SharedDtor() {
  if (client_fid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete client_fid_;
  }
  if (this != default_instance_) {
  }
}

void ClientEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientEntry_descriptor_;
}

const ClientEntry& ClientEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_boyim_2eproto();
  return *default_instance_;
}

ClientEntry* ClientEntry::default_instance_ = NULL;

ClientEntry* ClientEntry::New() const {
  return new ClientEntry;
}

void ClientEntry::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_client_fid()) {
      if (client_fid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        client_fid_->clear();
      }
    }
    start_clock_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:boyim_proto.ClientEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string client_fid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_fid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->client_fid().data(), this->client_fid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "client_fid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_start_clock;
        break;
      }

      // required int64 start_clock = 2;
      case 2: {
        if (tag == 16) {
         parse_start_clock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_clock_)));
          set_has_start_clock();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:boyim_proto.ClientEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:boyim_proto.ClientEntry)
  return false;
#undef DO_
}

void ClientEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:boyim_proto.ClientEntry)
  // required string client_fid = 1;
  if (has_client_fid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_fid().data(), this->client_fid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "client_fid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->client_fid(), output);
  }

  // required int64 start_clock = 2;
  if (has_start_clock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->start_clock(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:boyim_proto.ClientEntry)
}

::google::protobuf::uint8* ClientEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:boyim_proto.ClientEntry)
  // required string client_fid = 1;
  if (has_client_fid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_fid().data(), this->client_fid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "client_fid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->client_fid(), target);
  }

  // required int64 start_clock = 2;
  if (has_start_clock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->start_clock(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:boyim_proto.ClientEntry)
  return target;
}

int ClientEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string client_fid = 1;
    if (has_client_fid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->client_fid());
    }

    // required int64 start_clock = 2;
    if (has_start_clock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->start_clock());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientEntry::MergeFrom(const ClientEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_fid()) {
      set_client_fid(from.client_fid());
    }
    if (from.has_start_clock()) {
      set_start_clock(from.start_clock());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientEntry::CopyFrom(const ClientEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientEntry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ClientEntry::Swap(ClientEntry* other) {
  if (other != this) {
    std::swap(client_fid_, other->client_fid_);
    std::swap(start_clock_, other->start_clock_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientEntry_descriptor_;
  metadata.reflection = ClientEntry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChatReadyRequest::kHeaderFieldNumber;
const int ChatReadyRequest::kSessionIdFieldNumber;
const int ChatReadyRequest::kClientInfoFieldNumber;
#endif  // !_MSC_VER

ChatReadyRequest::ChatReadyRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:boyim_proto.ChatReadyRequest)
}

void ChatReadyRequest::InitAsDefaultInstance() {
  header_ = const_cast< ::boyim_proto::Header*>(&::boyim_proto::Header::default_instance());
}

ChatReadyRequest::ChatReadyRequest(const ChatReadyRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:boyim_proto.ChatReadyRequest)
}

void ChatReadyRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  header_ = NULL;
  session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatReadyRequest::~ChatReadyRequest() {
  // @@protoc_insertion_point(destructor:boyim_proto.ChatReadyRequest)
  SharedDtor();
}

void ChatReadyRequest::SharedDtor() {
  if (session_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete session_id_;
  }
  if (client_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete client_info_;
  }
  if (this != default_instance_) {
    delete header_;
  }
}

void ChatReadyRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatReadyRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatReadyRequest_descriptor_;
}

const ChatReadyRequest& ChatReadyRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_boyim_2eproto();
  return *default_instance_;
}

ChatReadyRequest* ChatReadyRequest::default_instance_ = NULL;

ChatReadyRequest* ChatReadyRequest::New() const {
  return new ChatReadyRequest;
}

void ChatReadyRequest::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_header()) {
      if (header_ != NULL) header_->::boyim_proto::Header::Clear();
    }
    if (has_session_id()) {
      if (session_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        session_id_->clear();
      }
    }
    if (has_client_info()) {
      if (client_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        client_info_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChatReadyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:boyim_proto.ChatReadyRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .boyim_proto.Header header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_session_id;
        break;
      }

      // required string session_id = 2;
      case 2: {
        if (tag == 18) {
         parse_session_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->session_id().data(), this->session_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "session_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_client_info;
        break;
      }

      // required string client_info = 3;
      case 3: {
        if (tag == 26) {
         parse_client_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->client_info().data(), this->client_info().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "client_info");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:boyim_proto.ChatReadyRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:boyim_proto.ChatReadyRequest)
  return false;
#undef DO_
}

void ChatReadyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:boyim_proto.ChatReadyRequest)
  // required .boyim_proto.Header header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // required string session_id = 2;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "session_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->session_id(), output);
  }

  // required string client_info = 3;
  if (has_client_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_info().data(), this->client_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "client_info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->client_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:boyim_proto.ChatReadyRequest)
}

::google::protobuf::uint8* ChatReadyRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:boyim_proto.ChatReadyRequest)
  // required .boyim_proto.Header header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // required string session_id = 2;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "session_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->session_id(), target);
  }

  // required string client_info = 3;
  if (has_client_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_info().data(), this->client_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "client_info");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->client_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:boyim_proto.ChatReadyRequest)
  return target;
}

int ChatReadyRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .boyim_proto.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // required string session_id = 2;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->session_id());
    }

    // required string client_info = 3;
    if (has_client_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->client_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatReadyRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChatReadyRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChatReadyRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChatReadyRequest::MergeFrom(const ChatReadyRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::boyim_proto::Header::MergeFrom(from.header());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_client_info()) {
      set_client_info(from.client_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChatReadyRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatReadyRequest::CopyFrom(const ChatReadyRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatReadyRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_header()) {
    if (!this->header().IsInitialized()) return false;
  }
  return true;
}

void ChatReadyRequest::Swap(ChatReadyRequest* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(session_id_, other->session_id_);
    std::swap(client_info_, other->client_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChatReadyRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatReadyRequest_descriptor_;
  metadata.reflection = ChatReadyRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChatReadyResponse::kHeaderFieldNumber;
const int ChatReadyResponse::kSessionIdFieldNumber;
const int ChatReadyResponse::kCodeFieldNumber;
const int ChatReadyResponse::kServiceInfoFieldNumber;
#endif  // !_MSC_VER

ChatReadyResponse::ChatReadyResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:boyim_proto.ChatReadyResponse)
}

void ChatReadyResponse::InitAsDefaultInstance() {
  header_ = const_cast< ::boyim_proto::Header*>(&::boyim_proto::Header::default_instance());
}

ChatReadyResponse::ChatReadyResponse(const ChatReadyResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:boyim_proto.ChatReadyResponse)
}

void ChatReadyResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  header_ = NULL;
  session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_ = 0;
  service_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatReadyResponse::~ChatReadyResponse() {
  // @@protoc_insertion_point(destructor:boyim_proto.ChatReadyResponse)
  SharedDtor();
}

void ChatReadyResponse::SharedDtor() {
  if (session_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete session_id_;
  }
  if (service_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete service_info_;
  }
  if (this != default_instance_) {
    delete header_;
  }
}

void ChatReadyResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatReadyResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatReadyResponse_descriptor_;
}

const ChatReadyResponse& ChatReadyResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_boyim_2eproto();
  return *default_instance_;
}

ChatReadyResponse* ChatReadyResponse::default_instance_ = NULL;

ChatReadyResponse* ChatReadyResponse::New() const {
  return new ChatReadyResponse;
}

void ChatReadyResponse::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_header()) {
      if (header_ != NULL) header_->::boyim_proto::Header::Clear();
    }
    if (has_session_id()) {
      if (session_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        session_id_->clear();
      }
    }
    code_ = 0;
    if (has_service_info()) {
      if (service_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        service_info_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChatReadyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:boyim_proto.ChatReadyResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .boyim_proto.Header header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_session_id;
        break;
      }

      // required string session_id = 2;
      case 2: {
        if (tag == 18) {
         parse_session_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->session_id().data(), this->session_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "session_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_code;
        break;
      }

      // required int32 code = 3;
      case 3: {
        if (tag == 24) {
         parse_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_service_info;
        break;
      }

      // optional string service_info = 4;
      case 4: {
        if (tag == 34) {
         parse_service_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->service_info().data(), this->service_info().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "service_info");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:boyim_proto.ChatReadyResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:boyim_proto.ChatReadyResponse)
  return false;
#undef DO_
}

void ChatReadyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:boyim_proto.ChatReadyResponse)
  // required .boyim_proto.Header header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // required string session_id = 2;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "session_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->session_id(), output);
  }

  // required int32 code = 3;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->code(), output);
  }

  // optional string service_info = 4;
  if (has_service_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->service_info().data(), this->service_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "service_info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->service_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:boyim_proto.ChatReadyResponse)
}

::google::protobuf::uint8* ChatReadyResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:boyim_proto.ChatReadyResponse)
  // required .boyim_proto.Header header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // required string session_id = 2;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "session_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->session_id(), target);
  }

  // required int32 code = 3;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->code(), target);
  }

  // optional string service_info = 4;
  if (has_service_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->service_info().data(), this->service_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "service_info");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->service_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:boyim_proto.ChatReadyResponse)
  return target;
}

int ChatReadyResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .boyim_proto.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // required string session_id = 2;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->session_id());
    }

    // required int32 code = 3;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

    // optional string service_info = 4;
    if (has_service_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->service_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatReadyResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChatReadyResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChatReadyResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChatReadyResponse::MergeFrom(const ChatReadyResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::boyim_proto::Header::MergeFrom(from.header());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_service_info()) {
      set_service_info(from.service_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChatReadyResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatReadyResponse::CopyFrom(const ChatReadyResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatReadyResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_header()) {
    if (!this->header().IsInitialized()) return false;
  }
  return true;
}

void ChatReadyResponse::Swap(ChatReadyResponse* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(session_id_, other->session_id_);
    std::swap(code_, other->code_);
    std::swap(service_info_, other->service_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChatReadyResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatReadyResponse_descriptor_;
  metadata.reflection = ChatReadyResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChatMessage::kHeaderFieldNumber;
const int ChatMessage::kSessionIdFieldNumber;
const int ChatMessage::kSeqIdFieldNumber;
const int ChatMessage::kTypeFieldNumber;
const int ChatMessage::kMsgFieldNumber;
#endif  // !_MSC_VER

ChatMessage::ChatMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:boyim_proto.ChatMessage)
}

void ChatMessage::InitAsDefaultInstance() {
  header_ = const_cast< ::boyim_proto::Header*>(&::boyim_proto::Header::default_instance());
}

ChatMessage::ChatMessage(const ChatMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:boyim_proto.ChatMessage)
}

void ChatMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  header_ = NULL;
  session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  seq_id_ = GOOGLE_LONGLONG(0);
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatMessage::~ChatMessage() {
  // @@protoc_insertion_point(destructor:boyim_proto.ChatMessage)
  SharedDtor();
}

void ChatMessage::SharedDtor() {
  if (session_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete session_id_;
  }
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msg_;
  }
  if (this != default_instance_) {
    delete header_;
  }
}

void ChatMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatMessage_descriptor_;
}

const ChatMessage& ChatMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_boyim_2eproto();
  return *default_instance_;
}

ChatMessage* ChatMessage::default_instance_ = NULL;

ChatMessage* ChatMessage::New() const {
  return new ChatMessage;
}

void ChatMessage::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    if (has_header()) {
      if (header_ != NULL) header_->::boyim_proto::Header::Clear();
    }
    if (has_session_id()) {
      if (session_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        session_id_->clear();
      }
    }
    seq_id_ = GOOGLE_LONGLONG(0);
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        type_->clear();
      }
    }
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChatMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:boyim_proto.ChatMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .boyim_proto.Header header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_session_id;
        break;
      }

      // required string session_id = 2;
      case 2: {
        if (tag == 18) {
         parse_session_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->session_id().data(), this->session_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "session_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_seq_id;
        break;
      }

      // required int64 seq_id = 3;
      case 3: {
        if (tag == 24) {
         parse_seq_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &seq_id_)));
          set_has_seq_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_type;
        break;
      }

      // required string type = 4;
      case 4: {
        if (tag == 34) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_msg;
        break;
      }

      // required string msg = 5;
      case 5: {
        if (tag == 42) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "msg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:boyim_proto.ChatMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:boyim_proto.ChatMessage)
  return false;
#undef DO_
}

void ChatMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:boyim_proto.ChatMessage)
  // required .boyim_proto.Header header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // required string session_id = 2;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "session_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->session_id(), output);
  }

  // required int64 seq_id = 3;
  if (has_seq_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->seq_id(), output);
  }

  // required string type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->type(), output);
  }

  // required string msg = 5;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:boyim_proto.ChatMessage)
}

::google::protobuf::uint8* ChatMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:boyim_proto.ChatMessage)
  // required .boyim_proto.Header header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // required string session_id = 2;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "session_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->session_id(), target);
  }

  // required int64 seq_id = 3;
  if (has_seq_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->seq_id(), target);
  }

  // required string type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->type(), target);
  }

  // required string msg = 5;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:boyim_proto.ChatMessage)
  return target;
}

int ChatMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .boyim_proto.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // required string session_id = 2;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->session_id());
    }

    // required int64 seq_id = 3;
    if (has_seq_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->seq_id());
    }

    // required string type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // required string msg = 5;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChatMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChatMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChatMessage::MergeFrom(const ChatMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::boyim_proto::Header::MergeFrom(from.header());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_seq_id()) {
      set_seq_id(from.seq_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChatMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatMessage::CopyFrom(const ChatMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_header()) {
    if (!this->header().IsInitialized()) return false;
  }
  return true;
}

void ChatMessage::Swap(ChatMessage* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(session_id_, other->session_id_);
    std::swap(seq_id_, other->seq_id_);
    std::swap(type_, other->type_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChatMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatMessage_descriptor_;
  metadata.reflection = ChatMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChatMessageAck::kHeaderFieldNumber;
const int ChatMessageAck::kSessionIdFieldNumber;
const int ChatMessageAck::kSeqIdsFieldNumber;
#endif  // !_MSC_VER

ChatMessageAck::ChatMessageAck()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:boyim_proto.ChatMessageAck)
}

void ChatMessageAck::InitAsDefaultInstance() {
  header_ = const_cast< ::boyim_proto::Header*>(&::boyim_proto::Header::default_instance());
}

ChatMessageAck::ChatMessageAck(const ChatMessageAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:boyim_proto.ChatMessageAck)
}

void ChatMessageAck::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  header_ = NULL;
  session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatMessageAck::~ChatMessageAck() {
  // @@protoc_insertion_point(destructor:boyim_proto.ChatMessageAck)
  SharedDtor();
}

void ChatMessageAck::SharedDtor() {
  if (session_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete session_id_;
  }
  if (this != default_instance_) {
    delete header_;
  }
}

void ChatMessageAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatMessageAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatMessageAck_descriptor_;
}

const ChatMessageAck& ChatMessageAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_boyim_2eproto();
  return *default_instance_;
}

ChatMessageAck* ChatMessageAck::default_instance_ = NULL;

ChatMessageAck* ChatMessageAck::New() const {
  return new ChatMessageAck;
}

void ChatMessageAck::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_header()) {
      if (header_ != NULL) header_->::boyim_proto::Header::Clear();
    }
    if (has_session_id()) {
      if (session_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        session_id_->clear();
      }
    }
  }
  seq_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChatMessageAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:boyim_proto.ChatMessageAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .boyim_proto.Header header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_session_id;
        break;
      }

      // required string session_id = 2;
      case 2: {
        if (tag == 18) {
         parse_session_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->session_id().data(), this->session_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "session_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_seq_ids;
        break;
      }

      // repeated int64 seq_ids = 3;
      case 3: {
        if (tag == 24) {
         parse_seq_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 24, input, this->mutable_seq_ids())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_seq_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_seq_ids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:boyim_proto.ChatMessageAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:boyim_proto.ChatMessageAck)
  return false;
#undef DO_
}

void ChatMessageAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:boyim_proto.ChatMessageAck)
  // required .boyim_proto.Header header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // required string session_id = 2;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "session_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->session_id(), output);
  }

  // repeated int64 seq_ids = 3;
  for (int i = 0; i < this->seq_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      3, this->seq_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:boyim_proto.ChatMessageAck)
}

::google::protobuf::uint8* ChatMessageAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:boyim_proto.ChatMessageAck)
  // required .boyim_proto.Header header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // required string session_id = 2;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "session_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->session_id(), target);
  }

  // repeated int64 seq_ids = 3;
  for (int i = 0; i < this->seq_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(3, this->seq_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:boyim_proto.ChatMessageAck)
  return target;
}

int ChatMessageAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .boyim_proto.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // required string session_id = 2;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->session_id());
    }

  }
  // repeated int64 seq_ids = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->seq_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->seq_ids(i));
    }
    total_size += 1 * this->seq_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatMessageAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChatMessageAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChatMessageAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChatMessageAck::MergeFrom(const ChatMessageAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  seq_ids_.MergeFrom(from.seq_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::boyim_proto::Header::MergeFrom(from.header());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChatMessageAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatMessageAck::CopyFrom(const ChatMessageAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatMessageAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_header()) {
    if (!this->header().IsInitialized()) return false;
  }
  return true;
}

void ChatMessageAck::Swap(ChatMessageAck* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(session_id_, other->session_id_);
    seq_ids_.Swap(&other->seq_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChatMessageAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatMessageAck_descriptor_;
  metadata.reflection = ChatMessageAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FunctionMessage::kHeaderFieldNumber;
const int FunctionMessage::kSessionIdFieldNumber;
const int FunctionMessage::kSeqIdFieldNumber;
const int FunctionMessage::kFunctionFieldNumber;
#endif  // !_MSC_VER

FunctionMessage::FunctionMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:boyim_proto.FunctionMessage)
}

void FunctionMessage::InitAsDefaultInstance() {
  header_ = const_cast< ::boyim_proto::Header*>(&::boyim_proto::Header::default_instance());
}

FunctionMessage::FunctionMessage(const FunctionMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:boyim_proto.FunctionMessage)
}

void FunctionMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  header_ = NULL;
  session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  seq_id_ = GOOGLE_LONGLONG(0);
  function_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FunctionMessage::~FunctionMessage() {
  // @@protoc_insertion_point(destructor:boyim_proto.FunctionMessage)
  SharedDtor();
}

void FunctionMessage::SharedDtor() {
  if (session_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete session_id_;
  }
  if (function_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete function_;
  }
  if (this != default_instance_) {
    delete header_;
  }
}

void FunctionMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FunctionMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FunctionMessage_descriptor_;
}

const FunctionMessage& FunctionMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_boyim_2eproto();
  return *default_instance_;
}

FunctionMessage* FunctionMessage::default_instance_ = NULL;

FunctionMessage* FunctionMessage::New() const {
  return new FunctionMessage;
}

void FunctionMessage::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_header()) {
      if (header_ != NULL) header_->::boyim_proto::Header::Clear();
    }
    if (has_session_id()) {
      if (session_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        session_id_->clear();
      }
    }
    seq_id_ = GOOGLE_LONGLONG(0);
    if (has_function()) {
      if (function_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        function_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FunctionMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:boyim_proto.FunctionMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .boyim_proto.Header header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_session_id;
        break;
      }

      // required string session_id = 2;
      case 2: {
        if (tag == 18) {
         parse_session_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->session_id().data(), this->session_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "session_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_seq_id;
        break;
      }

      // required int64 seq_id = 3;
      case 3: {
        if (tag == 24) {
         parse_seq_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &seq_id_)));
          set_has_seq_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_function;
        break;
      }

      // required string function = 4;
      case 4: {
        if (tag == 34) {
         parse_function:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_function()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->function().data(), this->function().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "function");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:boyim_proto.FunctionMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:boyim_proto.FunctionMessage)
  return false;
#undef DO_
}

void FunctionMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:boyim_proto.FunctionMessage)
  // required .boyim_proto.Header header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // required string session_id = 2;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "session_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->session_id(), output);
  }

  // required int64 seq_id = 3;
  if (has_seq_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->seq_id(), output);
  }

  // required string function = 4;
  if (has_function()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->function().data(), this->function().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "function");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->function(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:boyim_proto.FunctionMessage)
}

::google::protobuf::uint8* FunctionMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:boyim_proto.FunctionMessage)
  // required .boyim_proto.Header header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // required string session_id = 2;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "session_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->session_id(), target);
  }

  // required int64 seq_id = 3;
  if (has_seq_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->seq_id(), target);
  }

  // required string function = 4;
  if (has_function()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->function().data(), this->function().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "function");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->function(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:boyim_proto.FunctionMessage)
  return target;
}

int FunctionMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .boyim_proto.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // required string session_id = 2;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->session_id());
    }

    // required int64 seq_id = 3;
    if (has_seq_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->seq_id());
    }

    // required string function = 4;
    if (has_function()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->function());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FunctionMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FunctionMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FunctionMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FunctionMessage::MergeFrom(const FunctionMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::boyim_proto::Header::MergeFrom(from.header());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_seq_id()) {
      set_seq_id(from.seq_id());
    }
    if (from.has_function()) {
      set_function(from.function());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FunctionMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FunctionMessage::CopyFrom(const FunctionMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FunctionMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_header()) {
    if (!this->header().IsInitialized()) return false;
  }
  return true;
}

void FunctionMessage::Swap(FunctionMessage* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(session_id_, other->session_id_);
    std::swap(seq_id_, other->seq_id_);
    std::swap(function_, other->function_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FunctionMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FunctionMessage_descriptor_;
  metadata.reflection = FunctionMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FunctionMessageResponse::kCodeFieldNumber;
const int FunctionMessageResponse::kSessionIdFieldNumber;
const int FunctionMessageResponse::kSeqIdFieldNumber;
#endif  // !_MSC_VER

FunctionMessageResponse::FunctionMessageResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:boyim_proto.FunctionMessageResponse)
}

void FunctionMessageResponse::InitAsDefaultInstance() {
}

FunctionMessageResponse::FunctionMessageResponse(const FunctionMessageResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:boyim_proto.FunctionMessageResponse)
}

void FunctionMessageResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  code_ = 0;
  session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  seq_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FunctionMessageResponse::~FunctionMessageResponse() {
  // @@protoc_insertion_point(destructor:boyim_proto.FunctionMessageResponse)
  SharedDtor();
}

void FunctionMessageResponse::SharedDtor() {
  if (session_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete session_id_;
  }
  if (this != default_instance_) {
  }
}

void FunctionMessageResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FunctionMessageResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FunctionMessageResponse_descriptor_;
}

const FunctionMessageResponse& FunctionMessageResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_boyim_2eproto();
  return *default_instance_;
}

FunctionMessageResponse* FunctionMessageResponse::default_instance_ = NULL;

FunctionMessageResponse* FunctionMessageResponse::New() const {
  return new FunctionMessageResponse;
}

void FunctionMessageResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FunctionMessageResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(seq_id_, code_);
    if (has_session_id()) {
      if (session_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        session_id_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FunctionMessageResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:boyim_proto.FunctionMessageResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_session_id;
        break;
      }

      // required string session_id = 2;
      case 2: {
        if (tag == 18) {
         parse_session_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->session_id().data(), this->session_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "session_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_seq_id;
        break;
      }

      // required int64 seq_id = 3;
      case 3: {
        if (tag == 24) {
         parse_seq_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &seq_id_)));
          set_has_seq_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:boyim_proto.FunctionMessageResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:boyim_proto.FunctionMessageResponse)
  return false;
#undef DO_
}

void FunctionMessageResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:boyim_proto.FunctionMessageResponse)
  // required int32 code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // required string session_id = 2;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "session_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->session_id(), output);
  }

  // required int64 seq_id = 3;
  if (has_seq_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->seq_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:boyim_proto.FunctionMessageResponse)
}

::google::protobuf::uint8* FunctionMessageResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:boyim_proto.FunctionMessageResponse)
  // required int32 code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // required string session_id = 2;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "session_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->session_id(), target);
  }

  // required int64 seq_id = 3;
  if (has_seq_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->seq_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:boyim_proto.FunctionMessageResponse)
  return target;
}

int FunctionMessageResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

    // required string session_id = 2;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->session_id());
    }

    // required int64 seq_id = 3;
    if (has_seq_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->seq_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FunctionMessageResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FunctionMessageResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FunctionMessageResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FunctionMessageResponse::MergeFrom(const FunctionMessageResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_seq_id()) {
      set_seq_id(from.seq_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FunctionMessageResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FunctionMessageResponse::CopyFrom(const FunctionMessageResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FunctionMessageResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void FunctionMessageResponse::Swap(FunctionMessageResponse* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(session_id_, other->session_id_);
    std::swap(seq_id_, other->seq_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FunctionMessageResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FunctionMessageResponse_descriptor_;
  metadata.reflection = FunctionMessageResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogoutMessage::kHeaderFieldNumber;
const int LogoutMessage::kSessionIdFieldNumber;
const int LogoutMessage::kClockFieldNumber;
const int LogoutMessage::kServiceGidFieldNumber;
const int LogoutMessage::kServiceSiteIdFieldNumber;
const int LogoutMessage::kServiceStationIdFieldNumber;
const int LogoutMessage::kEndTypeFieldNumber;
const int LogoutMessage::kExtraFieldNumber;
#endif  // !_MSC_VER

LogoutMessage::LogoutMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:boyim_proto.LogoutMessage)
}

void LogoutMessage::InitAsDefaultInstance() {
  header_ = const_cast< ::boyim_proto::Header*>(&::boyim_proto::Header::default_instance());
}

LogoutMessage::LogoutMessage(const LogoutMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:boyim_proto.LogoutMessage)
}

void LogoutMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  header_ = NULL;
  session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clock_ = GOOGLE_LONGLONG(0);
  service_gid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  service_site_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  service_station_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_type_ = 0;
  extra_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogoutMessage::~LogoutMessage() {
  // @@protoc_insertion_point(destructor:boyim_proto.LogoutMessage)
  SharedDtor();
}

void LogoutMessage::SharedDtor() {
  if (session_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete session_id_;
  }
  if (service_gid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete service_gid_;
  }
  if (service_site_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete service_site_id_;
  }
  if (service_station_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete service_station_id_;
  }
  if (extra_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete extra_;
  }
  if (this != default_instance_) {
    delete header_;
  }
}

void LogoutMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogoutMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogoutMessage_descriptor_;
}

const LogoutMessage& LogoutMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_boyim_2eproto();
  return *default_instance_;
}

LogoutMessage* LogoutMessage::default_instance_ = NULL;

LogoutMessage* LogoutMessage::New() const {
  return new LogoutMessage;
}

void LogoutMessage::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_header()) {
      if (header_ != NULL) header_->::boyim_proto::Header::Clear();
    }
    if (has_session_id()) {
      if (session_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        session_id_->clear();
      }
    }
    clock_ = GOOGLE_LONGLONG(0);
    if (has_service_gid()) {
      if (service_gid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        service_gid_->clear();
      }
    }
    if (has_service_site_id()) {
      if (service_site_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        service_site_id_->clear();
      }
    }
    if (has_service_station_id()) {
      if (service_station_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        service_station_id_->clear();
      }
    }
    end_type_ = 0;
    if (has_extra()) {
      if (extra_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        extra_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogoutMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:boyim_proto.LogoutMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .boyim_proto.Header header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_session_id;
        break;
      }

      // optional string session_id = 2;
      case 2: {
        if (tag == 18) {
         parse_session_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->session_id().data(), this->session_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "session_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_clock;
        break;
      }

      // optional int64 clock = 3;
      case 3: {
        if (tag == 24) {
         parse_clock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &clock_)));
          set_has_clock();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_service_gid;
        break;
      }

      // optional string service_gid = 4;
      case 4: {
        if (tag == 34) {
         parse_service_gid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_gid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->service_gid().data(), this->service_gid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "service_gid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_service_site_id;
        break;
      }

      // optional string service_site_id = 5;
      case 5: {
        if (tag == 42) {
         parse_service_site_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_site_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->service_site_id().data(), this->service_site_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "service_site_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_service_station_id;
        break;
      }

      // optional string service_station_id = 6;
      case 6: {
        if (tag == 50) {
         parse_service_station_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_station_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->service_station_id().data(), this->service_station_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "service_station_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_end_type;
        break;
      }

      // optional int32 end_type = 7;
      case 7: {
        if (tag == 56) {
         parse_end_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_type_)));
          set_has_end_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_extra;
        break;
      }

      // optional string extra = 11;
      case 11: {
        if (tag == 90) {
         parse_extra:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extra()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->extra().data(), this->extra().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "extra");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:boyim_proto.LogoutMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:boyim_proto.LogoutMessage)
  return false;
#undef DO_
}

void LogoutMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:boyim_proto.LogoutMessage)
  // required .boyim_proto.Header header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // optional string session_id = 2;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "session_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->session_id(), output);
  }

  // optional int64 clock = 3;
  if (has_clock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->clock(), output);
  }

  // optional string service_gid = 4;
  if (has_service_gid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->service_gid().data(), this->service_gid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "service_gid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->service_gid(), output);
  }

  // optional string service_site_id = 5;
  if (has_service_site_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->service_site_id().data(), this->service_site_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "service_site_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->service_site_id(), output);
  }

  // optional string service_station_id = 6;
  if (has_service_station_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->service_station_id().data(), this->service_station_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "service_station_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->service_station_id(), output);
  }

  // optional int32 end_type = 7;
  if (has_end_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->end_type(), output);
  }

  // optional string extra = 11;
  if (has_extra()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extra().data(), this->extra().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "extra");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->extra(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:boyim_proto.LogoutMessage)
}

::google::protobuf::uint8* LogoutMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:boyim_proto.LogoutMessage)
  // required .boyim_proto.Header header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // optional string session_id = 2;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "session_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->session_id(), target);
  }

  // optional int64 clock = 3;
  if (has_clock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->clock(), target);
  }

  // optional string service_gid = 4;
  if (has_service_gid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->service_gid().data(), this->service_gid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "service_gid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->service_gid(), target);
  }

  // optional string service_site_id = 5;
  if (has_service_site_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->service_site_id().data(), this->service_site_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "service_site_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->service_site_id(), target);
  }

  // optional string service_station_id = 6;
  if (has_service_station_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->service_station_id().data(), this->service_station_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "service_station_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->service_station_id(), target);
  }

  // optional int32 end_type = 7;
  if (has_end_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->end_type(), target);
  }

  // optional string extra = 11;
  if (has_extra()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extra().data(), this->extra().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "extra");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->extra(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:boyim_proto.LogoutMessage)
  return target;
}

int LogoutMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .boyim_proto.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // optional string session_id = 2;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->session_id());
    }

    // optional int64 clock = 3;
    if (has_clock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->clock());
    }

    // optional string service_gid = 4;
    if (has_service_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->service_gid());
    }

    // optional string service_site_id = 5;
    if (has_service_site_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->service_site_id());
    }

    // optional string service_station_id = 6;
    if (has_service_station_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->service_station_id());
    }

    // optional int32 end_type = 7;
    if (has_end_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->end_type());
    }

    // optional string extra = 11;
    if (has_extra()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extra());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogoutMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogoutMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogoutMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogoutMessage::MergeFrom(const LogoutMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::boyim_proto::Header::MergeFrom(from.header());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_clock()) {
      set_clock(from.clock());
    }
    if (from.has_service_gid()) {
      set_service_gid(from.service_gid());
    }
    if (from.has_service_site_id()) {
      set_service_site_id(from.service_site_id());
    }
    if (from.has_service_station_id()) {
      set_service_station_id(from.service_station_id());
    }
    if (from.has_end_type()) {
      set_end_type(from.end_type());
    }
    if (from.has_extra()) {
      set_extra(from.extra());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogoutMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogoutMessage::CopyFrom(const LogoutMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogoutMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_header()) {
    if (!this->header().IsInitialized()) return false;
  }
  return true;
}

void LogoutMessage::Swap(LogoutMessage* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(session_id_, other->session_id_);
    std::swap(clock_, other->clock_);
    std::swap(service_gid_, other->service_gid_);
    std::swap(service_site_id_, other->service_site_id_);
    std::swap(service_station_id_, other->service_station_id_);
    std::swap(end_type_, other->end_type_);
    std::swap(extra_, other->extra_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogoutMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogoutMessage_descriptor_;
  metadata.reflection = LogoutMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServiceStatus::kHeaderFieldNumber;
const int ServiceStatus::kStatusFieldNumber;
#endif  // !_MSC_VER

ServiceStatus::ServiceStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:boyim_proto.ServiceStatus)
}

void ServiceStatus::InitAsDefaultInstance() {
  header_ = const_cast< ::boyim_proto::Header*>(&::boyim_proto::Header::default_instance());
}

ServiceStatus::ServiceStatus(const ServiceStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:boyim_proto.ServiceStatus)
}

void ServiceStatus::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServiceStatus::~ServiceStatus() {
  // @@protoc_insertion_point(destructor:boyim_proto.ServiceStatus)
  SharedDtor();
}

void ServiceStatus::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
  }
}

void ServiceStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServiceStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServiceStatus_descriptor_;
}

const ServiceStatus& ServiceStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_boyim_2eproto();
  return *default_instance_;
}

ServiceStatus* ServiceStatus::default_instance_ = NULL;

ServiceStatus* ServiceStatus::New() const {
  return new ServiceStatus;
}

void ServiceStatus::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_header()) {
      if (header_ != NULL) header_->::boyim_proto::Header::Clear();
    }
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServiceStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:boyim_proto.ServiceStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .boyim_proto.Header header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required int32 status = 2;
      case 2: {
        if (tag == 16) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:boyim_proto.ServiceStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:boyim_proto.ServiceStatus)
  return false;
#undef DO_
}

void ServiceStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:boyim_proto.ServiceStatus)
  // required .boyim_proto.Header header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // required int32 status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:boyim_proto.ServiceStatus)
}

::google::protobuf::uint8* ServiceStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:boyim_proto.ServiceStatus)
  // required .boyim_proto.Header header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // required int32 status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:boyim_proto.ServiceStatus)
  return target;
}

int ServiceStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .boyim_proto.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // required int32 status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServiceStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServiceStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServiceStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServiceStatus::MergeFrom(const ServiceStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::boyim_proto::Header::MergeFrom(from.header());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServiceStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceStatus::CopyFrom(const ServiceStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_header()) {
    if (!this->header().IsInitialized()) return false;
  }
  return true;
}

void ServiceStatus::Swap(ServiceStatus* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServiceStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServiceStatus_descriptor_;
  metadata.reflection = ServiceStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShiftSession::kHeaderFieldNumber;
const int ShiftSession::kSessionIdFieldNumber;
const int ShiftSession::kShiftToFidFieldNumber;
#endif  // !_MSC_VER

ShiftSession::ShiftSession()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:boyim_proto.ShiftSession)
}

void ShiftSession::InitAsDefaultInstance() {
  header_ = const_cast< ::boyim_proto::Header*>(&::boyim_proto::Header::default_instance());
}

ShiftSession::ShiftSession(const ShiftSession& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:boyim_proto.ShiftSession)
}

void ShiftSession::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  header_ = NULL;
  session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  shift_to_fid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShiftSession::~ShiftSession() {
  // @@protoc_insertion_point(destructor:boyim_proto.ShiftSession)
  SharedDtor();
}

void ShiftSession::SharedDtor() {
  if (session_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete session_id_;
  }
  if (shift_to_fid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete shift_to_fid_;
  }
  if (this != default_instance_) {
    delete header_;
  }
}

void ShiftSession::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShiftSession::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShiftSession_descriptor_;
}

const ShiftSession& ShiftSession::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_boyim_2eproto();
  return *default_instance_;
}

ShiftSession* ShiftSession::default_instance_ = NULL;

ShiftSession* ShiftSession::New() const {
  return new ShiftSession;
}

void ShiftSession::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_header()) {
      if (header_ != NULL) header_->::boyim_proto::Header::Clear();
    }
    if (has_session_id()) {
      if (session_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        session_id_->clear();
      }
    }
    if (has_shift_to_fid()) {
      if (shift_to_fid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        shift_to_fid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShiftSession::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:boyim_proto.ShiftSession)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .boyim_proto.Header header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_session_id;
        break;
      }

      // required string session_id = 2;
      case 2: {
        if (tag == 18) {
         parse_session_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->session_id().data(), this->session_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "session_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_shift_to_fid;
        break;
      }

      // required string shift_to_fid = 3;
      case 3: {
        if (tag == 26) {
         parse_shift_to_fid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_shift_to_fid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->shift_to_fid().data(), this->shift_to_fid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "shift_to_fid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:boyim_proto.ShiftSession)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:boyim_proto.ShiftSession)
  return false;
#undef DO_
}

void ShiftSession::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:boyim_proto.ShiftSession)
  // required .boyim_proto.Header header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // required string session_id = 2;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "session_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->session_id(), output);
  }

  // required string shift_to_fid = 3;
  if (has_shift_to_fid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->shift_to_fid().data(), this->shift_to_fid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "shift_to_fid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->shift_to_fid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:boyim_proto.ShiftSession)
}

::google::protobuf::uint8* ShiftSession::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:boyim_proto.ShiftSession)
  // required .boyim_proto.Header header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // required string session_id = 2;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "session_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->session_id(), target);
  }

  // required string shift_to_fid = 3;
  if (has_shift_to_fid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->shift_to_fid().data(), this->shift_to_fid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "shift_to_fid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->shift_to_fid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:boyim_proto.ShiftSession)
  return target;
}

int ShiftSession::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .boyim_proto.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // required string session_id = 2;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->session_id());
    }

    // required string shift_to_fid = 3;
    if (has_shift_to_fid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->shift_to_fid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShiftSession::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShiftSession* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShiftSession*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShiftSession::MergeFrom(const ShiftSession& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::boyim_proto::Header::MergeFrom(from.header());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_shift_to_fid()) {
      set_shift_to_fid(from.shift_to_fid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShiftSession::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShiftSession::CopyFrom(const ShiftSession& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShiftSession::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_header()) {
    if (!this->header().IsInitialized()) return false;
  }
  return true;
}

void ShiftSession::Swap(ShiftSession* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(session_id_, other->session_id_);
    std::swap(shift_to_fid_, other->shift_to_fid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShiftSession::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShiftSession_descriptor_;
  metadata.reflection = ShiftSession_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EndSession::kHeaderFieldNumber;
const int EndSession::kSessionIdFieldNumber;
const int EndSession::kClientGidFieldNumber;
const int EndSession::kClientSiteIdFieldNumber;
const int EndSession::kClientStationIdFieldNumber;
const int EndSession::kArchiveClassFieldNumber;
const int EndSession::kArchiveCategoryFieldNumber;
const int EndSession::kSessionUpgradedFieldNumber;
const int EndSession::kSessionInvalidFieldNumber;
const int EndSession::kEndTypeFieldNumber;
#endif  // !_MSC_VER

EndSession::EndSession()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:boyim_proto.EndSession)
}

void EndSession::InitAsDefaultInstance() {
  header_ = const_cast< ::boyim_proto::Header*>(&::boyim_proto::Header::default_instance());
}

EndSession::EndSession(const EndSession& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:boyim_proto.EndSession)
}

void EndSession::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  header_ = NULL;
  session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_gid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_site_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_station_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  archive_class_ = 0;
  archive_category_ = 0;
  session_upgraded_ = 0;
  session_invalid_ = 0;
  end_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EndSession::~EndSession() {
  // @@protoc_insertion_point(destructor:boyim_proto.EndSession)
  SharedDtor();
}

void EndSession::SharedDtor() {
  if (session_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete session_id_;
  }
  if (client_gid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete client_gid_;
  }
  if (client_site_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete client_site_id_;
  }
  if (client_station_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete client_station_id_;
  }
  if (this != default_instance_) {
    delete header_;
  }
}

void EndSession::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EndSession::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EndSession_descriptor_;
}

const EndSession& EndSession::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_boyim_2eproto();
  return *default_instance_;
}

EndSession* EndSession::default_instance_ = NULL;

EndSession* EndSession::New() const {
  return new EndSession;
}

void EndSession::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<EndSession*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(archive_class_, session_upgraded_);
    if (has_header()) {
      if (header_ != NULL) header_->::boyim_proto::Header::Clear();
    }
    if (has_session_id()) {
      if (session_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        session_id_->clear();
      }
    }
    if (has_client_gid()) {
      if (client_gid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        client_gid_->clear();
      }
    }
    if (has_client_site_id()) {
      if (client_site_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        client_site_id_->clear();
      }
    }
    if (has_client_station_id()) {
      if (client_station_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        client_station_id_->clear();
      }
    }
  }
  ZR_(session_invalid_, end_type_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EndSession::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:boyim_proto.EndSession)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .boyim_proto.Header header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_session_id;
        break;
      }

      // required string session_id = 2;
      case 2: {
        if (tag == 18) {
         parse_session_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->session_id().data(), this->session_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "session_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_client_gid;
        break;
      }

      // required string client_gid = 3;
      case 3: {
        if (tag == 26) {
         parse_client_gid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_gid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->client_gid().data(), this->client_gid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "client_gid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_client_site_id;
        break;
      }

      // required string client_site_id = 4;
      case 4: {
        if (tag == 34) {
         parse_client_site_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_site_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->client_site_id().data(), this->client_site_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "client_site_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_client_station_id;
        break;
      }

      // required string client_station_id = 5;
      case 5: {
        if (tag == 42) {
         parse_client_station_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_station_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->client_station_id().data(), this->client_station_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "client_station_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_archive_class;
        break;
      }

      // optional int32 archive_class = 6;
      case 6: {
        if (tag == 48) {
         parse_archive_class:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &archive_class_)));
          set_has_archive_class();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_archive_category;
        break;
      }

      // optional int32 archive_category = 7;
      case 7: {
        if (tag == 56) {
         parse_archive_category:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &archive_category_)));
          set_has_archive_category();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_session_upgraded;
        break;
      }

      // optional int32 session_upgraded = 8;
      case 8: {
        if (tag == 64) {
         parse_session_upgraded:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &session_upgraded_)));
          set_has_session_upgraded();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_session_invalid;
        break;
      }

      // optional int32 session_invalid = 9;
      case 9: {
        if (tag == 72) {
         parse_session_invalid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &session_invalid_)));
          set_has_session_invalid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_end_type;
        break;
      }

      // optional int32 end_type = 10;
      case 10: {
        if (tag == 80) {
         parse_end_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_type_)));
          set_has_end_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:boyim_proto.EndSession)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:boyim_proto.EndSession)
  return false;
#undef DO_
}

void EndSession::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:boyim_proto.EndSession)
  // required .boyim_proto.Header header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // required string session_id = 2;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "session_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->session_id(), output);
  }

  // required string client_gid = 3;
  if (has_client_gid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_gid().data(), this->client_gid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "client_gid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->client_gid(), output);
  }

  // required string client_site_id = 4;
  if (has_client_site_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_site_id().data(), this->client_site_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "client_site_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->client_site_id(), output);
  }

  // required string client_station_id = 5;
  if (has_client_station_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_station_id().data(), this->client_station_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "client_station_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->client_station_id(), output);
  }

  // optional int32 archive_class = 6;
  if (has_archive_class()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->archive_class(), output);
  }

  // optional int32 archive_category = 7;
  if (has_archive_category()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->archive_category(), output);
  }

  // optional int32 session_upgraded = 8;
  if (has_session_upgraded()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->session_upgraded(), output);
  }

  // optional int32 session_invalid = 9;
  if (has_session_invalid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->session_invalid(), output);
  }

  // optional int32 end_type = 10;
  if (has_end_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->end_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:boyim_proto.EndSession)
}

::google::protobuf::uint8* EndSession::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:boyim_proto.EndSession)
  // required .boyim_proto.Header header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // required string session_id = 2;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "session_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->session_id(), target);
  }

  // required string client_gid = 3;
  if (has_client_gid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_gid().data(), this->client_gid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "client_gid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->client_gid(), target);
  }

  // required string client_site_id = 4;
  if (has_client_site_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_site_id().data(), this->client_site_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "client_site_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->client_site_id(), target);
  }

  // required string client_station_id = 5;
  if (has_client_station_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_station_id().data(), this->client_station_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "client_station_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->client_station_id(), target);
  }

  // optional int32 archive_class = 6;
  if (has_archive_class()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->archive_class(), target);
  }

  // optional int32 archive_category = 7;
  if (has_archive_category()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->archive_category(), target);
  }

  // optional int32 session_upgraded = 8;
  if (has_session_upgraded()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->session_upgraded(), target);
  }

  // optional int32 session_invalid = 9;
  if (has_session_invalid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->session_invalid(), target);
  }

  // optional int32 end_type = 10;
  if (has_end_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->end_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:boyim_proto.EndSession)
  return target;
}

int EndSession::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .boyim_proto.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // required string session_id = 2;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->session_id());
    }

    // required string client_gid = 3;
    if (has_client_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->client_gid());
    }

    // required string client_site_id = 4;
    if (has_client_site_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->client_site_id());
    }

    // required string client_station_id = 5;
    if (has_client_station_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->client_station_id());
    }

    // optional int32 archive_class = 6;
    if (has_archive_class()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->archive_class());
    }

    // optional int32 archive_category = 7;
    if (has_archive_category()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->archive_category());
    }

    // optional int32 session_upgraded = 8;
    if (has_session_upgraded()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->session_upgraded());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 session_invalid = 9;
    if (has_session_invalid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->session_invalid());
    }

    // optional int32 end_type = 10;
    if (has_end_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->end_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EndSession::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EndSession* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EndSession*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EndSession::MergeFrom(const EndSession& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::boyim_proto::Header::MergeFrom(from.header());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_client_gid()) {
      set_client_gid(from.client_gid());
    }
    if (from.has_client_site_id()) {
      set_client_site_id(from.client_site_id());
    }
    if (from.has_client_station_id()) {
      set_client_station_id(from.client_station_id());
    }
    if (from.has_archive_class()) {
      set_archive_class(from.archive_class());
    }
    if (from.has_archive_category()) {
      set_archive_category(from.archive_category());
    }
    if (from.has_session_upgraded()) {
      set_session_upgraded(from.session_upgraded());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_session_invalid()) {
      set_session_invalid(from.session_invalid());
    }
    if (from.has_end_type()) {
      set_end_type(from.end_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EndSession::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EndSession::CopyFrom(const EndSession& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EndSession::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_header()) {
    if (!this->header().IsInitialized()) return false;
  }
  return true;
}

void EndSession::Swap(EndSession* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(session_id_, other->session_id_);
    std::swap(client_gid_, other->client_gid_);
    std::swap(client_site_id_, other->client_site_id_);
    std::swap(client_station_id_, other->client_station_id_);
    std::swap(archive_class_, other->archive_class_);
    std::swap(archive_category_, other->archive_category_);
    std::swap(session_upgraded_, other->session_upgraded_);
    std::swap(session_invalid_, other->session_invalid_);
    std::swap(end_type_, other->end_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EndSession::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EndSession_descriptor_;
  metadata.reflection = EndSession_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace boyim_proto

// @@protoc_insertion_point(global_scope)
